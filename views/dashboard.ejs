<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Boxicons -->
	<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<!-- CSS -->
	<link rel="stylesheet" href="/admin.css">
	<!-- FileSaver.js for download functionality -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>

	<title>Twitter Analytics Dashboard</title>
</head>
<body>

	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="#" class="brand">
			<i class='bx bxl-twitter'></i>
			<span class="text">XBot</span>
		</a>
		<ul class="side-menu top">
			<li>
				<a href="#" id="relevantBtn">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Relevant Tweets</span>
				</a>
			</li>
			<li>
				<a href="#" id="topBtn">
					<i class='bx bxs-chat'></i>
					<span class="text">My Tweets</span>
				</a>
			</li>
			<li>
				<a href="#" id="engagersBtn">
					<i class='bx bxs-group'></i>
					<span class="text">Engagers</span>
				</a>
			</li>
			<li>
				<a href="#" id="followAccountsBtn">
					<i class='bx bxs-user-plus'></i>
					<span class="text">Follow Accounts</span>
				</a>
			</li>
		</ul>
	</section>
	<!-- SIDEBAR -->

	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu'></i>
			
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
		</nav>
		<!-- NAVBAR -->
        
		<!-- MAIN -->
		<main id="twitterDashboard">
			<div class="head-title">
				<div class="left">
					<h1 id="resultsTitle">Twitter Analytics Dashboard</h1>
				</div>
			</div>
			
			<!-- Welcome Message -->
			<div id="welcomeMessage" class="welcome-container">
				<div class="welcome-content">
					<i class='bx bxs-smile welcome-icon'></i>
					<h2>Welcome to the Twitter Analytics Dashboard</h2>
					<p>Get started by selecting an option from the sidebar or below:</p>
					<div class="welcome-options">
						<div class="welcome-option" data-action="relevant">
							<i class='bx bxs-dashboard'></i>
							<span>Relevant Tweets</span>
						</div>
						<div class="welcome-option" data-action="top">
							<i class='bx bxs-chat'></i>
							<span>My Tweets</span>
						</div>
						<div class="welcome-option" data-action="engagers">
							<i class='bx bxs-group'></i>
							<span>Engagers</span>
						</div>
						<div class="welcome-option" data-action="follow">
							<i class='bx bxs-user-plus'></i>
							<span>Follow Accounts</span>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Status and Loading -->
			<div id="status" class="status-message" style="display:none"></div>

			<!-- Results Container -->
			<div id="resultsContainer" class="table-data" style="display:none">
				<div class="order">
					<div class="head">
						<h3 id="subTitle">Results</h3>
					</div>
					<div id="tweet-container"></div>
				</div>
			</div>
		</main>
		<!-- MAIN -->
	</section>
	<!-- CONTENT -->

	<script>
		// Twitter Analytics Functionality
		const statusDiv = document.getElementById('status');
		const container = document.getElementById('tweet-container');
		const resultsTitle = document.getElementById('resultsTitle');
		const subTitle = document.getElementById('subTitle');
		const welcomeMessage = document.getElementById('welcomeMessage');
		const resultsContainer = document.getElementById('resultsContainer');

		const switchMode = document.getElementById('switch-mode');

		switchMode.addEventListener('change', function () {
			if(this.checked) {
				document.body.classList.add('dark');
			} else {
				document.body.classList.remove('dark');
			}
		})

		// Function to activate sidebar item
		function activateSidebarItem(action) {
			// Remove active class from all sidebar items
			document.querySelectorAll('#sidebar .side-menu.top li').forEach(li => {
				li.classList.remove('active');
			});
			
			// Add active class to the corresponding sidebar item
			switch(action) {
				case 'relevant':
					document.querySelector('#sidebar .side-menu.top li:first-child').classList.add('active');
					break;
				case 'top':
					document.querySelector('#sidebar .side-menu.top li:nth-child(2)').classList.add('active');
					break;
				case 'engagers':
					document.querySelector('#sidebar .side-menu.top li:nth-child(3)').classList.add('active');
					break;
				case 'follow':
					document.querySelector('#sidebar .side-menu.top li:nth-child(4)').classList.add('active');
					break;
				case 'monitor':
					document.querySelector('#sidebar .side-menu.top li:nth-child(5)').classList.add('active');
					break;
			}
		}

		// Sidebar button event listeners
		document.getElementById('relevantBtn').addEventListener('click', () => {
			activateSidebarItem('relevant');
			showResults();
			loadMonitor();
			resultsTitle.textContent = 'Relevant Tweets Monitor';
			subTitle.textContent = '';
		});

		document.getElementById('topBtn').addEventListener('click', () => {
			activateSidebarItem('top');
			showResults();
			loadTweets('/my-top');
			resultsTitle.textContent = 'My Top Tweets';
			subTitle.textContent = 'Tweets';
		});

		document.getElementById('engagersBtn').addEventListener('click', () => {
			activateSidebarItem('engagers');
			showResults();
			loadEngagers();
			resultsTitle.textContent = 'Latest Engagers';
			subTitle.textContent = 'Users';
		});

		document.getElementById('followAccountsBtn').addEventListener('click', () => {
			activateSidebarItem('follow');
			showResults();
			followAccounts();
			resultsTitle.textContent = 'Follow Accounts';
			subTitle.textContent = 'Users';
		});


		// Welcome screen button event listeners
		document.querySelectorAll('.welcome-option').forEach(option => {
			option.addEventListener('click', () => {
				const action = option.getAttribute('data-action');
				activateSidebarItem(action);
				
				switch(action) {
					case 'relevant':
						showResults();
						loadMonitor();
						resultsTitle.textContent = 'Relevant Tweets Monitor';
						subTitle.textContent = '';
						break;
					case 'top':
						showResults();
						loadTweets('/my-top');
						resultsTitle.textContent = 'My Top Tweets';
						subTitle.textContent = 'Tweets';
						break;
					case 'engagers':
						showResults();
						loadEngagers();
						resultsTitle.textContent = 'Latest Engagers';
						subTitle.textContent = 'Users';
						break;
					case 'follow':
						showResults();
						followAccounts();
						resultsTitle.textContent = 'Follow Accounts';
						subTitle.textContent = 'Users';
						break;
				}
			});
		});

		function showResults() {
			welcomeMessage.style.display = 'none';
			resultsContainer.style.display = 'block';
		}

		function showWelcome() {
			welcomeMessage.style.display = 'block';
			resultsContainer.style.display = 'none';
			statusDiv.style.display = 'none';
		}

		function clearResults() {
			container.innerHTML = '';
			statusDiv.style.display = 'none';
		}

		async function loadTweets(endpoint) {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading . . . ';

			try {
				const r = await fetch(endpoint);
				const { success, message, tweets } = await r.json();
				statusDiv.textContent = message;
				statusDiv.className = 'status-message ' + (success ? 'status-success' : 'status-error');

				if (tweets.length === 0) {
					container.innerHTML = '<div class="no-tweets">No tweets found.</div>';
				} else {
					container.innerHTML = tweets.map(t => `
						<a href="${t.url}" target="_blank" class="tweet-url">
							<div class="tweet">
								<p class="tweet-text">${t.text}</p>
								<p class="engagements">üí¨ ${t.replies} üîÅ ${t.reposts} ‚ù§Ô∏è ${t.likes}</p>
							</div>
						</a>
					`).join('');
				}
			} catch (e) {
				statusDiv.textContent = 'Error fetching tweets.';
				statusDiv.className = 'status-message status-error';
			} finally {
			}
		}

		async function loadEngagers() {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading . . . ';

			try {
				const r = await fetch('/my-engagers');
				const { success, message, engagers } = await r.json();
				statusDiv.textContent = message;
				statusDiv.className = 'status-message ' + (success ? 'status-success' : 'status-error');

				if (!engagers.length) {
					container.innerHTML = '<div class="no-tweets">No engagers found.</div>';
				} else {
					container.innerHTML = engagers.map(e => `
						<a href="https://x.com/${e.handle}" target="_blank" class="tweet-url">
							<div class="tweet">
								<p class="tweet-text">@${e.handle}</p>
								<p class="engagements">üë• Followers: ${e.followers}</p>
							</div>
						</a>
					`).join('');
				}
			} catch (e) {
				statusDiv.textContent = 'Error fetching engagers.';
				statusDiv.className = 'status-message status-error';
			} finally {
			}
		}

		async function followAccounts() {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Following Ethereum accounts, please wait...';
			statusDiv.className = 'status-message';

			try {
				const response = await fetch('/follow');
				const data = await response.json();

				if (data.success) {
					if (data.followed.length > 0) {
						statusDiv.textContent = `Followed ${data.followed.length} accounts! Spreadsheet created and shown below.`;
						statusDiv.className = 'status-message status-success';

						// Display the accounts visually
						container.innerHTML = data.followed.map(acc => `
							<a href="${acc.profileUrl}" target="_blank" class="tweet-url">
								<div class="tweet">
									<p class="tweet-text">@${acc.handle}</p>
									<p class="engagements">üë• Followers: ${acc.followers.toLocaleString()}</p>
								</div>
							</a>
						`).join('');

						// Optionally add download link if backend returns file URL
						if (data.fileUrl) {
							const downloadLink = document.createElement('a');
							downloadLink.href = data.fileUrl;
							downloadLink.textContent = 'üì• Download Spreadsheet';
							downloadLink.className = 'download-link';
							downloadLink.target = '_blank';
							container.appendChild(downloadLink);
						}
					} else {
						statusDiv.textContent = 'No accounts were followed.';
						statusDiv.className = 'status-message status-error';
						container.innerHTML = '<div class="no-tweets">No accounts followed.</div>';
					}
				} else {
					statusDiv.textContent = 'Failed: ' + data.message;
					statusDiv.className = 'status-message status-error';
					container.innerHTML = '<div class="no-tweets">Could not follow accounts.</div>';
				}
			} catch (err) {
				statusDiv.textContent = 'Error: ' + err.message;
				statusDiv.className = 'status-message status-error';
				container.innerHTML = '<div class="no-tweets">Something went wrong.</div>';
			}
		}

		async function loadMonitor() {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading monitor status...';

			try {
				// Get current monitoring status
				const statusResponse = await fetch('/monitor/status');
				const statusData = await statusResponse.json();

				// Create monitor interface
				container.innerHTML = `
					<div class="monitor-container">
						<div class="monitor-status">
							<h3>Relevant Tweets Monitor</h3>
							<div class="status-indicator ${statusData.isMonitoring ? 'active' : 'inactive'}">
								<i class='bx ${statusData.isMonitoring ? 'bxs-circle' : 'bxs-circle'}'></i>
								<span>${statusData.isMonitoring ? 'Active' : 'Inactive'}</span>
							</div>
							<p class="status-message">${statusData.message}</p>
						</div>
						
						<div class="monitor-controls">
							<button id="startMonitor" class="monitor-btn start" ${statusData.isMonitoring ? 'disabled' : ''}>
								<i class='bx bx-play'></i>
								Start Monitoring
							</button>
							<button id="stopMonitor" class="monitor-btn stop" ${!statusData.isMonitoring ? 'disabled' : ''}>
								<i class='bx bx-stop'></i>
								Stop Monitoring
							</button>
						</div>
						
						<div class="monitor-info">
							<h4>What this does:</h4>
							<ul>
								<li>üìä Monitors latest 'Ethereum Tweets' spreadsheet for new rows</li>
								<li>üë• Checks follower count (must be >1000)</li>
								<li>ü§ñ Analyzes tweet content using AI (filters spam, bots, financial advice, etc.)</li>
								<li>‚úÖ Adds relevant tweets to target spreadsheet</li>
								<li>‚è∞ Runs automatically every 2 minutes</li>
							</ul>
						</div>
					</div>
				`;

				// Add event listeners for monitor controls
				document.getElementById('startMonitor').addEventListener('click', startMonitoring);
				document.getElementById('stopMonitor').addEventListener('click', stopMonitoring);

				statusDiv.style.display = 'none';

			} catch (e) {
				statusDiv.textContent = 'Error loading monitor interface.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function startMonitoring() {
			try {
				// Immediately update UI for better UX
				const monitorStatus = document.querySelector('.monitor-status .status-indicator');
				const monitorStatusText = monitorStatus.querySelector('span');
				monitorStatus.classList.remove('inactive');
				monitorStatus.classList.add('active');
				monitorStatusText.textContent = 'Active';

				document.getElementById('startMonitor').disabled = true;
				document.getElementById('stopMonitor').disabled = false;

				statusDiv.textContent = 'Starting monitoring...';
				statusDiv.className = 'status-message status-success';
				statusDiv.style.display = '';

				const response = await fetch('/monitor/start', { method: 'POST' });
				const data = await response.json();

				statusDiv.textContent = data.message;
				statusDiv.className = 'status-message ' + (data.success ? 'status-success' : 'status-error');

				// Optionally, reload monitor interface after a short delay to sync with backend
				setTimeout(loadMonitor, 1000);

			} catch (e) {
				statusDiv.textContent = 'Error starting monitoring.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function stopMonitoring() {
			try {
				const response = await fetch('/monitor/stop', { method: 'POST' });
				const data = await response.json();
				
				if (data.success) {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-success';
					// Reload monitor interface to update status
					loadMonitor();
				} else {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-error';
				}
			} catch (e) {
				statusDiv.textContent = 'Error stopping monitoring.';
				statusDiv.className = 'status-message status-error';
			}
		}
	</script>
</body>
</html>