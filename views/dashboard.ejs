<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Boxicons -->
	<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<!-- CSS -->
	<link rel="stylesheet" href="/admin.css">
	<!-- FileSaver.js for download functionality -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>

	<title>Twitter Analytics Dashboard</title>
</head>
<body>

	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="#" class="brand">
			<i class='bx bxl-twitter'></i>
			<span class="text">XBot</span>
		</a>
		<ul class="side-menu top">
			<li>
				<a href="#" id="homeBtn">
					<i class='bx bxs-home'></i>
					<span class="text">Home</span>
				</a>
			</li>
			<li id="relevantNavItem" class="sub-item" style="display: none;">
				<a href="#" id="relevantBtn">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Relevant Tweets</span>
				</a>
			</li>
			<li id="topicAssociationNavItem" class="sub-item" style="display: none;">
				<a href="#" id="topicAssociationBtn">
					<i class='bx bxs-network-chart'></i>
					<span class="text">Topic Association</span>
				</a>
			</li>
			<li>
				<a href="#" id="topBtn">
					<i class='bx bxs-chat'></i>
					<span class="text">My Tweets</span>
				</a>
			</li>
			<li>
				<a href="#" id="engagersBtn">
					<i class='bx bxs-group'></i>
					<span class="text">Engagers</span>
				</a>
			</li>
			<li>
				<a href="#" id="followAccountsBtn" title="">
					<i class='bx bxs-user-plus'></i>
					<span class="text">Follow Accounts</span>
				</a>
			</li>
		</ul>
	</section>
	<!-- SIDEBAR -->

	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu'></i>
			
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
		</nav>
		<!-- NAVBAR -->
        
		<!-- MAIN -->
		<main id="twitterDashboard">
			<div class="head-title">
				<div class="left">
					<h1 id="resultsTitle">Twitter Analytics Dashboard</h1>
				</div>
			</div>
			
			<!-- Welcome Message -->
			<div id="welcomeMessage" class="welcome-container">
				<div class="welcome-content">
					<i class='bx bxs-smile welcome-icon'></i>
					<h2>Welcome to the Twitter Analytics Dashboard</h2>
					<div class="topic-selection">
						<label for="topicSelect">Select Topic:</label>
						<select id="topicSelect" onchange="setTopic()">
							<option value="" disabled selected>Choose a topic...</option>
						</select>
					</div>
					<div class="follower-filter" id="followerFilter" style="display: none;">
						<label for="followerCount">Minimum Follower Count:</label>
						<input type="number" id="followerCount" min="0" step="100" />
						<small>Filter results by minimum follower count</small>
					</div>
					<p id="welcomeText">Please select a topic to get started.</p>
					<div class="welcome-options" id="welcomeOptions" style="display: none;">
						<div class="welcome-option" data-action="relevant">
							<i class='bx bxs-dashboard'></i>
							<span>Relevant Tweets</span>
						</div>
						<div class="welcome-option" data-action="topic-association">
							<i class='bx bxs-network-chart'></i>
							<span>Topic Association</span>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Status and Loading -->
			<div id="status" class="status-message" style="display:none"></div>

			<!-- Results Container -->
			<div id="resultsContainer" class="table-data" style="display:none">
				<div class="order">
					<div class="head">
						<h3 id="subTitle">Results</h3>
					</div>
					<div id="tweet-container"></div>
				</div>
			</div>
		</main>
		<!-- MAIN -->
	</section>
	<!-- CONTENT -->

	<script>
		// Twitter Analytics Functionality
		const statusDiv = document.getElementById('status');
		const container = document.getElementById('tweet-container');
		const resultsTitle = document.getElementById('resultsTitle');
		const subTitle = document.getElementById('subTitle');
		const welcomeMessage = document.getElementById('welcomeMessage');
		const resultsContainer = document.getElementById('resultsContainer');
		
		let selectedTopic = null;
		
		function getFollowerCount() {
			const followerCountInput = document.getElementById('followerCount');
			return followerCountInput.value ? parseInt(followerCountInput.value) : 1000;
		}
		
		async function setTopic() {
			const topicSelect = document.getElementById('topicSelect');
			const welcomeText = document.getElementById('welcomeText');
			const welcomeOptions = document.getElementById('welcomeOptions');
			const followerFilter = document.getElementById('followerFilter');
			const followerCountInput = document.getElementById('followerCount');
			const relevantNavItem = document.getElementById('relevantNavItem');
			const topicAssociationNavItem = document.getElementById('topicAssociationNavItem');
			
			selectedTopic = topicSelect.value;
			
			if (selectedTopic) {
				welcomeText.textContent = `Topic set to ${topicSelect.options[topicSelect.selectedIndex].text}. Set follower filter and choose an action below:`;
				welcomeOptions.style.display = 'flex';
				followerFilter.style.display = 'block';
				
				// Get default follower count from config for this topic
				try {
					const configResponse = await fetch('/get-topic-config', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ topic: selectedTopic })
					});
					const configData = await configResponse.json();
					
					if (configData.success && configData.config.followersThreshold) {
						followerCountInput.value = configData.config.followersThreshold;
					}
				} catch (err) {
					console.log('Error getting topic config:', err);
					// Set a default value if config fetch fails
					followerCountInput.value = 1000;
				}
				
				// Show the topic-specific navigation items
				relevantNavItem.style.display = 'block';
				topicAssociationNavItem.style.display = 'block';
				
				// Enable Follow Accounts button
				updateFollowAccountsButton(true);
				
				// Send topic to server with error handling
				try {
					const response = await fetch('/set-topic', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ topic: selectedTopic })
					});
					
					const result = await response.json();
					
					if (!result.success) {
						// Invalid topic - show error and reset
						alert(`❌ Invalid topic "${selectedTopic}": ${result.message}\n\nPlease choose from the available topics: ethereum, basketball`);
						
						// Reset the dropdown
						topicSelect.value = '';
						selectedTopic = null;
						
						// Hide all topic-dependent elements
						welcomeText.textContent = 'Please select a topic to get started.';
						welcomeOptions.style.display = 'none';
						followerFilter.style.display = 'none';
						relevantNavItem.style.display = 'none';
						topicAssociationNavItem.style.display = 'none';
						updateFollowAccountsButton(false);
						
						return;
					}
				} catch (err) {
					console.log('Error setting topic:', err);
					alert('❌ Error setting topic. Please try again.');
					
					// Reset on error
					topicSelect.value = '';
					selectedTopic = null;
					welcomeText.textContent = 'Please select a topic to get started.';
					welcomeOptions.style.display = 'none';
					followerFilter.style.display = 'none';
					relevantNavItem.style.display = 'none';
					topicAssociationNavItem.style.display = 'none';
					updateFollowAccountsButton(false);
					
					return;
				}
			} else {
				welcomeText.textContent = 'Please select a topic to get started.';
				welcomeOptions.style.display = 'none';
				followerFilter.style.display = 'none';
				
				// Hide the topic-specific navigation items
				relevantNavItem.style.display = 'none';
				topicAssociationNavItem.style.display = 'none';
				
				// Disable Follow Accounts button
				updateFollowAccountsButton(false);
			}
		}

		// Function to update Follow Accounts button state
		function updateFollowAccountsButton(enabled) {
			const followBtn = document.getElementById('followAccountsBtn');
			console.log('Updating follow button:', enabled, followBtn);
			if (enabled) {
				followBtn.classList.remove('disabled');
				followBtn.title = '';
				followBtn.style.opacity = '1';
				followBtn.style.cursor = 'pointer';
			} else {
				followBtn.classList.add('disabled');
				followBtn.title = 'Set topic first';
				followBtn.style.opacity = '0.5';
				followBtn.style.cursor = 'not-allowed';
			}
			console.log('Button title set to:', followBtn.title);
		}

		const switchMode = document.getElementById('switch-mode');

		switchMode.addEventListener('change', function () {
			if(this.checked) {
				document.body.classList.add('dark');
			} else {
				document.body.classList.remove('dark');
			}
		})

		// Automatically select Home on page load and check for existing topic
		window.addEventListener('DOMContentLoaded', async () => {
			activateSidebarItem('home');
			
			// Load available topics from config
			await loadAvailableTopics();
			
			// Check if a topic is already set in the session
			try {
				const response = await fetch('/get-current-topic');
				const data = await response.json();
				
				console.log('Topic check response:', data);
				
				if (data.success && data.topic) {
					// Set the dropdown to the current topic
					const topicSelect = document.getElementById('topicSelect');
					topicSelect.value = data.topic;
					selectedTopic = data.topic;
					
					console.log('Setting topic to:', data.topic);
					
					// Trigger the setTopic function to show all UI elements
					await setTopic();
				} else {
					// No topic set, disable Follow Accounts button
					updateFollowAccountsButton(false);
				}
			} catch (err) {
				console.log('No existing topic found or error checking topic:', err);
				// No topic set, disable Follow Accounts button
				updateFollowAccountsButton(false);
			}
		});

		// Function to load available topics from config
		async function loadAvailableTopics() {
			try {
				const response = await fetch('/get-available-topics');
				const data = await response.json();
				
				if (data.success && data.topics) {
					const topicSelect = document.getElementById('topicSelect');
					
					// Clear existing options except the first one
					topicSelect.innerHTML = '<option value="" disabled selected>Choose a topic...</option>';
					
					// Add topics from config
					data.topics.forEach(topic => {
						const option = document.createElement('option');
						option.value = topic.key;
						option.textContent = topic.name;
						topicSelect.appendChild(option);
					});
					
					console.log('Loaded topics:', data.topics);
				} else {
					console.error('Failed to load topics:', data.message);
				}
			} catch (err) {
				console.error('Error loading topics:', err);
			}
		}

		// Function to activate sidebar item
		function activateSidebarItem(action) {
			// Remove active class from all sidebar items
			document.querySelectorAll('#sidebar .side-menu.top li').forEach(li => {
				li.classList.remove('active');
			});
			
			// Add active class to the corresponding sidebar item
			switch(action) {
				case 'home':
					document.querySelector('#sidebar .side-menu.top li:first-child').classList.add('active');
					break;
				case 'relevant':
					document.getElementById('relevantNavItem').classList.add('active');
					break;
				case 'topic-association':
					document.getElementById('topicAssociationNavItem').classList.add('active');
					break;
				case 'top':
					document.querySelector('#sidebar .side-menu.top li:nth-child(4)').classList.add('active');
					break;
				case 'engagers':
					document.querySelector('#sidebar .side-menu.top li:nth-child(5)').classList.add('active');
					break;
				case 'follow':
					document.querySelector('#sidebar .side-menu.top li:nth-child(6)').classList.add('active');
					break;
			}
		}

		// Sidebar button event listeners
		document.getElementById('homeBtn').addEventListener('click', () => {
			activateSidebarItem('home');
			showWelcome();
			resultsTitle.textContent = 'Twitter Analytics Dashboard';
			
			// Show/hide topic-specific elements based on current topic selection
			const relevantNavItem = document.getElementById('relevantNavItem');
			const topicAssociationNavItem = document.getElementById('topicAssociationNavItem');
			const followerFilter = document.getElementById('followerFilter');
			const welcomeOptions = document.getElementById('welcomeOptions');
			const topicSelect = document.getElementById('topicSelect');
			
			if (topicSelect.value) {
				relevantNavItem.style.display = 'block';
				topicAssociationNavItem.style.display = 'block';
				followerFilter.style.display = 'block';
				welcomeOptions.style.display = 'flex';
			} else {
				relevantNavItem.style.display = 'none';
				topicAssociationNavItem.style.display = 'none';
				followerFilter.style.display = 'none';
				welcomeOptions.style.display = 'none';
			}
		});

		document.getElementById('relevantBtn').addEventListener('click', () => {
			const topicSelect = document.getElementById('topicSelect');
			if (!selectedTopic && !topicSelect.value) {
				showTopicRequiredMessage('Relevant Tweets');
				return;
			}
			// Update selectedTopic if it's not set but dropdown has value
			if (!selectedTopic && topicSelect.value) {
				selectedTopic = topicSelect.value;
			}
			activateSidebarItem('relevant');
			showResults();
			loadMonitor();
			resultsTitle.textContent = 'Relevant Tweets Monitor';
			subTitle.textContent = '';
		});

		document.getElementById('topBtn').addEventListener('click', () => {
			// My Tweets doesn't require a topic
			activateSidebarItem('top');
			showResults();
			loadTweets('/my-top');
			resultsTitle.textContent = 'My Top Tweets';
			subTitle.textContent = 'Tweets';
		});

		document.getElementById('engagersBtn').addEventListener('click', () => {
			// Latest Engagers doesn't require a topic
			activateSidebarItem('engagers');
			showResults();
			loadEngagers();
			resultsTitle.textContent = 'Latest Engagers';
			subTitle.textContent = 'Users';
		});

		document.getElementById('followAccountsBtn').addEventListener('click', (e) => {
			// Check if button is disabled
			if (e.target.closest('#followAccountsBtn').classList.contains('disabled')) {
				// Button is disabled, do nothing (tooltip will show)
				return;
			}
			
			// Follow Accounts requires a topic to be set
			const topicSelect = document.getElementById('topicSelect');
			if (!selectedTopic && !topicSelect.value) {
				showTopicRequiredMessage('Follow Accounts');
				return;
			}
			activateSidebarItem('follow');
			showResults();
			followAccounts();
			resultsTitle.textContent = 'Follow Accounts';
			subTitle.textContent = 'Users';
		});

		document.getElementById('topicAssociationBtn').addEventListener('click', () => {
			const topicSelect = document.getElementById('topicSelect');
			if (!selectedTopic && !topicSelect.value) {
				showTopicRequiredMessage('Topic Association');
				return;
			}
			// Update selectedTopic if it's not set but dropdown has value
			if (!selectedTopic && topicSelect.value) {
				selectedTopic = topicSelect.value;
			}
			activateSidebarItem('topic-association');
			showResults();
			loadTopicAssociation();
			resultsTitle.textContent = 'Topic Association';
			subTitle.textContent = 'Generate Reply Suggestions';
		});


		// Welcome screen button event listeners
		document.querySelectorAll('.welcome-option').forEach(option => {
			option.addEventListener('click', () => {
				const action = option.getAttribute('data-action');
				activateSidebarItem(action);
				
				switch(action) {
					case 'relevant':
						showResults();
						loadMonitor();
						resultsTitle.textContent = 'Relevant Tweets Monitor';
						subTitle.textContent = '';
						break;
					case 'top':
						showResults();
						loadTweets('/my-top');
						resultsTitle.textContent = 'My Top Tweets';
						subTitle.textContent = 'Tweets';
						break;
					case 'engagers':
						showResults();
						loadEngagers();
						resultsTitle.textContent = 'Latest Engagers';
						subTitle.textContent = 'Users';
						break;
					case 'follow':
						showResults();
						followAccounts();
						resultsTitle.textContent = 'Follow Accounts';
						subTitle.textContent = 'Users';
						break;
					case 'topic-association':
						showResults();
						loadTopicAssociation();
						resultsTitle.textContent = 'Topic Association';
						subTitle.textContent = 'Generate Reply Suggestions';
						break;
				}
			});
		});

		function showResults() {
			welcomeMessage.style.display = 'none';
			resultsContainer.style.display = 'block';
		}

		function showWelcome() {
			welcomeMessage.style.display = 'flex';
			resultsContainer.style.display = 'none';
			statusDiv.style.display = 'none';
		}

		function showTopicRequiredMessage(featureName) {
			activateSidebarItem('home');
			showWelcome();
			resultsTitle.textContent = 'Topic Selection Required';
			
			// Highlight the topic selection
			const topicSelect = document.getElementById('topicSelect');
			const welcomeText = document.getElementById('welcomeText');
			
			welcomeText.textContent = `Please select a topic first to use ${featureName}.`;
			welcomeText.style.color = 'var(--red)';
			topicSelect.style.borderColor = 'var(--red)';
			
			// Reset styling after 3 seconds
			setTimeout(() => {
				welcomeText.style.color = '';
				topicSelect.style.borderColor = '';
				if (!selectedTopic) {
					welcomeText.textContent = 'Please select a topic to get started.';
				}
			}, 3000);
		}

		function clearResults() {
			container.innerHTML = '';
			statusDiv.style.display = 'none';
		}

		async function loadTweets(endpoint) {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading . . . ';

			try {
				const r = await fetch(endpoint);
				const { success, message, tweets } = await r.json();
				statusDiv.textContent = message;
				statusDiv.className = 'status-message ' + (success ? 'status-success' : 'status-error');

				if (tweets.length === 0) {
					container.innerHTML = '<div class="no-tweets">No tweets found.</div>';
				} else {
					container.innerHTML = tweets.map(t => `
						<a href="${t.url}" target="_blank" class="tweet-url">
							<div class="tweet">
								<p class="tweet-text">${t.text}</p>
								<p class="engagements">💬 ${t.replies} 🔁 ${t.reposts} ❤️ ${t.likes}</p>
							</div>
						</a>
					`).join('');
				}
			} catch (e) {
				statusDiv.textContent = 'Error fetching tweets.';
				statusDiv.className = 'status-message status-error';
			} finally {
			}
		}

		async function loadEngagers() {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading . . . ';

			try {
				const r = await fetch('/my-engagers');
				const { success, message, engagers } = await r.json();
				statusDiv.textContent = message;
				statusDiv.className = 'status-message ' + (success ? 'status-success' : 'status-error');

				if (!engagers.length) {
					container.innerHTML = '<div class="no-tweets">No engagers found.</div>';
				} else {
					container.innerHTML = engagers.map(e => `
						<a href="https://x.com/${e.handle}" target="_blank" class="tweet-url">
							<div class="tweet">
								<p class="tweet-text">@${e.handle}</p>
								<p class="engagements">👥 Followers: ${e.followers}</p>
							</div>
						</a>
					`).join('');
				}
			} catch (e) {
				statusDiv.textContent = 'Error fetching engagers.';
				statusDiv.className = 'status-message status-error';
			} finally {
			}
		}

		async function followAccounts() {
			// Show threshold selection UI instead of running immediately
			await showFollowAccountsThresholdUI();
		}

		async function showFollowAccountsThresholdUI() {
			container.innerHTML = '';
			statusDiv.style.display = 'none';

			try {
				// Get current topic's followAccountsThreshold from config
				const configResponse = await fetch('/get-topic-config', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ topic: selectedTopic })
				});
				const configData = await configResponse.json();
				
				const defaultThreshold = configData.success && configData.config.followAccountsThreshold 
					? configData.config.followAccountsThreshold 
					: 5000;

				// Create threshold selection UI
				container.innerHTML = `
					<div class="follow-threshold-container">
						<div class="threshold-header">
							<h3>Follow Accounts Configuration</h3>
							<p>Configure the follower threshold for accounts to follow</p>
						</div>
						
						<div class="threshold-setting">
							<label for="followThresholdInput"><strong>Minimum Follower Count:</strong></label>
							<input type="number" id="followThresholdInput" value="${defaultThreshold}" min="0" step="100" />
							<p class="threshold-note">Default for ${selectedTopic}: ${defaultThreshold.toLocaleString()} followers</p>
						</div>
						
						<div class="threshold-actions">
							<button id="runFollowAccounts" class="action-btn primary">
								<i class='bx bxs-user-plus'></i>
								Follow Accounts
							</button>
							<button id="cancelFollowAccounts" class="action-btn secondary">
								Cancel
							</button>
						</div>
					</div>
				`;

				// Add event listeners
				document.getElementById('runFollowAccounts').addEventListener('click', () => {
					const threshold = document.getElementById('followThresholdInput').value;
					executeFollowAccounts(parseInt(threshold));
				});

				document.getElementById('cancelFollowAccounts').addEventListener('click', () => {
					container.innerHTML = '';
					statusDiv.style.display = 'none';
				});

			} catch (error) {
				statusDiv.style.display = '';
				statusDiv.textContent = 'Error loading follow accounts configuration.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function executeFollowAccounts(threshold) {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = `Following accounts with ${threshold.toLocaleString()}+ followers, please wait...`;
			statusDiv.className = 'status-message';

			try {
				// Send threshold to server
				const response = await fetch('/follow', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ threshold: threshold })
				});
				const data = await response.json();

				if (data.success) {
					if (data.followed.length > 0) {
						statusDiv.textContent = `Followed ${data.followed.length} accounts! Row added to spreadsheet.`;
						statusDiv.className = 'status-message status-success';

						// Display the accounts visually
						container.innerHTML = data.followed.map(acc => `
							<a href="${acc.profileUrl}" target="_blank" class="tweet-url">
								<div class="tweet">
									<p class="tweet-text">@${acc.handle}</p>
									<p class="engagements">👥 Followers: ${acc.followers.toLocaleString()}</p>
								</div>
							</a>
						`).join('');

						// Optionally add download link if backend returns file URL
						if (data.fileUrl) {
							const downloadLink = document.createElement('a');
							downloadLink.href = data.fileUrl;
							downloadLink.textContent = '📥 Download Spreadsheet';
							downloadLink.className = 'download-link';
							downloadLink.target = '_blank';
							container.appendChild(downloadLink);
						}
					} else {
						statusDiv.textContent = 'No accounts were followed.';
						statusDiv.className = 'status-message status-error';
						container.innerHTML = '<div class="no-tweets">No accounts followed.</div>';
					}
				} else {
					statusDiv.textContent = 'Failed: ' + data.message;
					statusDiv.className = 'status-message status-error';
					container.innerHTML = '<div class="no-tweets">Could not follow accounts.</div>';
				}
			} catch (err) {
				statusDiv.textContent = 'Error: ' + err.message;
				statusDiv.className = 'status-message status-error';
				container.innerHTML = '<div class="no-tweets">Something went wrong.</div>';
			}
		}

		async function loadMonitor() {
			container.innerHTML = '';
			statusDiv.style.display = '';
			statusDiv.textContent = 'Loading monitor status...';

			try {
				// Get current monitoring status
				const statusResponse = await fetch('/monitor/status');
				const statusData = await statusResponse.json();
				
				// Handle topic not selected error
				if (!statusData.success && statusData.needsTopicSelection) {
					showTopicRequiredMessage('Relevant Tweets Monitor');
					return;
				}

				// Create monitor interface
				container.innerHTML = `
					<div class="monitor-container">
						<div class="monitor-status">
							<h3>Relevant Tweets Monitor</h3>
							<div class="status-indicator ${statusData.isMonitoring ? 'active' : 'inactive'}">
								<i class='bx ${statusData.isMonitoring ? 'bxs-circle' : 'bxs-circle'}'></i>
								<span>${statusData.isMonitoring ? 'Active' : 'Inactive'}</span>
							</div>
							<p class="status-message">${statusData.message}</p>
						</div>
						
						<div class="monitor-controls">
							<button id="startMonitor" class="monitor-btn start" ${statusData.isMonitoring ? 'disabled' : ''}>
								<i class='bx bx-play'></i>
								Start Monitoring
							</button>
							<button id="stopMonitor" class="monitor-btn stop" ${!statusData.isMonitoring ? 'disabled' : ''}>
								<i class='bx bx-stop'></i>
								Stop Monitoring
							</button>
						</div>
						
						<div class="monitor-info">
							<h4>What this does:</h4>
							<ul>
								<li>📊 Monitors latest tweets spreadsheet for new rows</li>
								<li>👥 Checks follower count (must be >1000)</li>
								<li>🤖 Analyzes tweet content using AI (filters spam, bots, financial advice, etc.)</li>
								<li>✅ Adds relevant tweets to target spreadsheet</li>
								<li>⏰ Runs automatically every 5 minutes</li>
							</ul>
						</div>
					</div>
				`;

				// Add event listeners for monitor controls
				document.getElementById('startMonitor').addEventListener('click', startMonitoring);
				document.getElementById('stopMonitor').addEventListener('click', stopMonitoring);

				statusDiv.style.display = 'none';

			} catch (e) {
				statusDiv.textContent = 'Error loading monitor interface.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function startMonitoring() {
			try {
				// Immediately update UI for better UX
				const monitorStatus = document.querySelector('.monitor-status .status-indicator');
				const monitorStatusText = monitorStatus.querySelector('span');
				monitorStatus.classList.remove('inactive');
				monitorStatus.classList.add('active');
				monitorStatusText.textContent = 'Active';

				document.getElementById('startMonitor').disabled = true;
				document.getElementById('stopMonitor').disabled = false;

				statusDiv.textContent = 'Starting monitoring...';
				statusDiv.className = 'status-message status-success';
				statusDiv.style.display = '';

				const response = await fetch('/monitor/start', { method: 'POST' });
				const data = await response.json();

				statusDiv.textContent = data.message;
				statusDiv.className = 'status-message ' + (data.success ? 'status-success' : 'status-error');

				// Optionally, reload monitor interface after a short delay to sync with backend
				setTimeout(loadMonitor, 1000);

			} catch (e) {
				statusDiv.textContent = 'Error starting monitoring.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function stopMonitoring() {
			try {
				const response = await fetch('/monitor/stop', { method: 'POST' });
				const data = await response.json();
				
				if (data.success) {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-success';
					// Reload monitor interface to update status
					loadMonitor();
				} else {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-error';
				}
			} catch (e) {
				statusDiv.textContent = 'Error stopping monitoring.';
				statusDiv.className = 'status-message status-error';
			}
		}

		async function loadTopicAssociation() {
			container.innerHTML = '';
			statusDiv.style.display = 'none';
			
			// Check if topic is selected first
			const topicSelect = document.getElementById('topicSelect');
			if (!selectedTopic && !topicSelect.value) {
				showTopicRequiredMessage('Topic Association');
				return;
			}

			// Create Topic Association interface
			container.innerHTML = `
				<div class="topic-association-container">
					<div class="topic-form">
						<div class="form-section">
							<h3>Topic 1 (Broader Topic)</h3>
							<div class="input-group">
								<label for="topic1">Enter a broader topic or theme:</label>
								<input type="text" id="topic1" placeholder="e.g., Artificial Intelligence, DeFi, Climate Change" />
								<small style="color: var(--dark-grey); font-size: 12px; margin-top: 4px; display: block;">
									This topic will be used to generate connections and reply suggestions
								</small>
							</div>
						</div>
						
						<div class="form-section">
							<h3>Topic 2 (Tweets from <span id="configuredTopicName">Configured</span> Folder)</h3>
							<div class="input-group">
								<label for="availableSheets">Select a sheet from your <span id="configuredTopicName2">configured</span> folder:</label>
								<select id="availableSheets" disabled>
									<option value="">Loading available sheets...</option>
								</select>
								<button type="button" id="refreshSheetsBtn" style="margin-top: 8px; padding: 8px 16px; background: var(--blue); color: white; border: none; border-radius: 4px; cursor: pointer;">
									<i class='bx bx-refresh'></i> Refresh Sheets
								</button>
							</div>
							<div class="input-group">
								<label for="sheetRange">Row Range (optional):</label>
								<input type="text" id="sheetRange" placeholder="e.g., 1:10 (or leave empty for all data)" />
								<small style="color: var(--dark-grey); font-size: 12px; margin-top: 4px; display: block;">
									Just enter row numbers like "1:10" or "2:20". Columns A-E will be automatically included.
								</small>
							</div>
						</div>
						
						<div class="form-actions">
							<button id="drawConnectionsBtn" class="draw-connections-btn">
								<i class='bx bx-network-chart'></i>
								Draw Connections
							</button>
						</div>
					</div>
					
					<div id="suggestions-container" class="suggestions-container" style="display: none;">
						<h3>Generated Reply Suggestions</h3>
						<div id="suggestions-content"></div>
					</div>
				</div>
			`;

			// Add event listeners
			document.getElementById('drawConnectionsBtn').addEventListener('click', drawConnections);
			document.getElementById('refreshSheetsBtn').addEventListener('click', loadAvailableSheets);
			
			// Load sheets automatically when the interface loads
			loadAvailableSheets();
		}

		// Function to load available sheets from the configured topic folder
		async function loadAvailableSheets() {
			const availableSheets = document.getElementById('availableSheets');
			
			try {
				availableSheets.innerHTML = '<option value="">Loading sheets...</option>';
				
				const response = await fetch('/topic-association/sheets');
				const data = await response.json();
				
				if (data.success && data.sheets.length > 0) {
					// Update the UI to show the configured topic name
					document.getElementById('configuredTopicName').textContent = data.topicName;
					document.getElementById('configuredTopicName2').textContent = data.topicName;
					
					availableSheets.innerHTML = '<option value="">Select a sheet...</option>';
					data.sheets.forEach(sheet => {
						const option = document.createElement('option');
						option.value = sheet.id;
						option.textContent = sheet.name;
						availableSheets.appendChild(option);
					});
					availableSheets.disabled = false;
				} else {
					availableSheets.innerHTML = '<option value="">No sheets found in configured folder</option>';
					availableSheets.disabled = true;
				}
			} catch (error) {
				availableSheets.innerHTML = '<option value="">Error loading sheets</option>';
				availableSheets.disabled = true;
				console.error('Error loading sheets:', error);
			}
		}

		async function drawConnections() {
			const topic1 = document.getElementById('topic1').value.trim();
			const sheetId = document.getElementById('availableSheets').value;
			const sheetRange = document.getElementById('sheetRange').value.trim();

			if (!topic1) {
				statusDiv.textContent = 'Please enter a broader topic.';
				statusDiv.className = 'status-message status-error';
				statusDiv.style.display = '';
				return;
			}

			if (!sheetId) {
				statusDiv.textContent = 'Please select a sheet from the available options.';
				statusDiv.className = 'status-message status-error';
				statusDiv.style.display = '';
				return;
			}

			// Validate range format if provided
			if (sheetRange && !/^\d+:\d+$/.test(sheetRange) && !/^[A-Z]+\d+:[A-Z]+\d+$/.test(sheetRange) && !/^[A-Z]+:[A-Z]+$/.test(sheetRange)) {
				statusDiv.textContent = 'Invalid range format. Use formats like "1:10" or leave empty.';
				statusDiv.className = 'status-message status-error';
				statusDiv.style.display = '';
				return;
			}

			statusDiv.textContent = 'Generating connections and reply suggestions...';
			statusDiv.className = 'status-message';
			statusDiv.style.display = '';

			try {
				const response = await fetch('/topic-association', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						topic1,
						sheetId,
						sheetRange
					})
				});

				const data = await response.json();

				if (data.success) {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-success';
					
					// Display suggestions
					displaySuggestions(data.suggestions);
				} else {
					statusDiv.textContent = data.message;
					statusDiv.className = 'status-message status-error';
					
					// Show "no connections" message instead of hiding the suggestions container
					displayNoConnections();
				}
			} catch (error) {
				statusDiv.textContent = 'Error generating connections: ' + error.message;
				statusDiv.className = 'status-message status-error';
			}
		}

		function displaySuggestions(suggestions) {
			const suggestionsContainer = document.getElementById('suggestions-container');
			const suggestionsContent = document.getElementById('suggestions-content');
			
			suggestionsContent.innerHTML = suggestions.map((suggestion, index) => `
				<div class="suggestion-item">
					<div class="original-tweet">
						<div class="tweet-header">
							<h4>Tweet ${index + 1}</h4>
							${suggestion.date && suggestion.date !== 'N/A' ? 
								`<div class="tweet-date">📅 ${suggestion.date}</div>` : 
								''}
							<div class="tweet-meta">
								<span class="tweet-handle">${suggestion.tweetHandle || '@unknown'}</span>
								${suggestion.tweetUrl && suggestion.tweetUrl !== 'N/A' ? 
									`<a href="${suggestion.tweetUrl}" target="_blank" class="tweet-link">🔗 View Tweet</a>` : 
									''}
								${suggestion.followerCount && suggestion.followerCount !== 'N/A' ? 
									`<span class="follower-count">👥 ${suggestion.followerCount}</span>` : 
									''}
							</div>
						</div>
						<p class="tweet-text">${suggestion.originalTweet}</p>
						<div class="connection-info">
							<strong>Connection:</strong> ${suggestion.connection}
						</div>
					</div>
					<div class="reply-suggestions">
						<h5>Reply Suggestions:</h5>
						<div class="replies-list">
							${suggestion.replies.map((reply, replyIndex) => `
								<div class="reply-item">
									<span class="reply-number">${replyIndex + 1}.</span>
									<span class="reply-text">${reply}</span>
									<button class="copy-reply-btn" data-reply="${reply}">
										<i class='bx bx-copy'></i>
									</button>
								</div>
							`).join('')}
						</div>
					</div>
				</div>
			`).join('');

			// Add copy functionality
			document.querySelectorAll('.copy-reply-btn').forEach(btn => {
				btn.addEventListener('click', () => {
					const reply = btn.getAttribute('data-reply');
					navigator.clipboard.writeText(reply).then(() => {
						btn.innerHTML = '<i class="bx bx-check"></i>';
						setTimeout(() => {
							btn.innerHTML = '<i class="bx bx-copy"></i>';
						}, 2000);
					});
				});
			});

			suggestionsContainer.style.display = 'block';
		}

		function displayNoConnections() {
			const suggestionsContainer = document.getElementById('suggestions-container');
			const suggestionsContent = document.getElementById('suggestions-content');
			
			suggestionsContent.innerHTML = `
				<div class="no-connections-message">
					<div class="no-connections-icon">🔗❌</div>
					<h4>No Connections Drawn</h4>
					<p>Claude CLI was unable to generate connections and reply suggestions.</p>
					<p>This could be due to:</p>
					<ul>
						<li>Invalid API key configuration</li>
						<li>Claude CLI not available</li>
						<li>Connection issues</li>
					</ul>
					<p>Please check the connection.log file for more details.</p>
				</div>
			`;
			
			suggestionsContainer.style.display = 'block';
		}
	</script>
</body>
</html>